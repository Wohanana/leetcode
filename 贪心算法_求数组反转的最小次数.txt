题目描述：
在仅包含 0 和 1 的数组 A 中，一次 K 位翻转包括选择一个长度为 K 的（连续）子数组，同时将子数组中的每个 0 更改为 1，而每个 1 更改为 0。
返回所需的 K 位翻转的最小次数，以便数组没有值为 0 的元素。如果不可能，返回 -1。

解析：
    贪心算法：当我们从某个位置开始准备翻转K位数字时，由于无法影响到该位置前面的数字，所以必须遇到0就翻转。不然该位置或者前面有0时，它无法变成1。

代码：
class Solution {
    public int minKBitFlips(int[] A, int K) {
        int ans = 0;
        int len = A.length;
        for(int i=0;i<len;i++){
            if(A[i] == 0){
                if(i + K > len) return -1;
                ans++;
                for(int j=i;j<i+K;j++)
                    A[j] ^= 1;
            }
        }
        return ans;
    }
}